// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	tagManager "github.com/startup-of-zero-reais/dynamo-for-lambda/tag-manager"
	mock "github.com/stretchr/testify/mock"
)

// Table is an autogenerated mock type for the Table type
type Table struct {
	mock.Mock
}

// Mocktable is an autogenerated mock type for Table type
type Mocktable struct {
	PK           string `diinamo:"type:string;hash"`
	SK           string `diinamo:"type:string;range"`
	Owner        string `diinamo:"type:string;gsi:CourseOwnerIndex;keyPairs:PK=Owner"`
	Title        string `diinamo:"type:string;gsi:CourseTitleIndex;keyPairs:Title=SK"`
	ParentCourse string `diinamo:"type:string;gsi:CourseLessonsIndex;keyPairs:ParentCourse=SK"`
	ParentModule string `diinamo:"type:string;lsi:ModuleLessonsIndex;keyPairs:ParentModule=SK"`
}

// AttributeDefinitions provides a mock function with given fields:
func (_m *Table) AttributeDefinitions() []types.AttributeDefinition {
	ret := _m.Called()

	var r0 []types.AttributeDefinition
	if rf, ok := ret.Get(0).(func() []types.AttributeDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.AttributeDefinition)
		}
	}

	return r0
}

// Billing provides a mock function with given fields:
func (_m *Table) Billing() types.BillingMode {
	ret := _m.Called()

	var r0 types.BillingMode
	if rf, ok := ret.Get(0).(func() types.BillingMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.BillingMode)
	}

	return r0
}

// GetGSI provides a mock function with given fields:
func (_m *Table) GetGSI() []types.GlobalSecondaryIndex {
	ret := _m.Called()

	var r0 []types.GlobalSecondaryIndex
	if rf, ok := ret.Get(0).(func() []types.GlobalSecondaryIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.GlobalSecondaryIndex)
		}
	}

	return r0
}

// GetLSI provides a mock function with given fields:
func (_m *Table) GetLSI() []types.LocalSecondaryIndex {
	ret := _m.Called()

	var r0 []types.LocalSecondaryIndex
	if rf, ok := ret.Get(0).(func() []types.LocalSecondaryIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.LocalSecondaryIndex)
		}
	}

	return r0
}

// GetMetadata provides a mock function with given fields:
func (_m *Table) GetMetadata() tagManager.Manager {
	ret := _m.Called()

	var r0 tagManager.Manager
	if rf, ok := ret.Get(0).(func() tagManager.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tagManager.Manager)
		}
	}

	return r0
}

// KeySchema provides a mock function with given fields:
func (_m *Table) KeySchema() []types.KeySchemaElement {
	ret := _m.Called()

	var r0 []types.KeySchemaElement
	if rf, ok := ret.Get(0).(func() []types.KeySchemaElement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.KeySchemaElement)
		}
	}

	return r0
}

// ProvisionedThroughput provides a mock function with given fields:
func (_m *Table) ProvisionedThroughput() *types.ProvisionedThroughput {
	ret := _m.Called()

	var r0 *types.ProvisionedThroughput
	if rf, ok := ret.Get(0).(func() *types.ProvisionedThroughput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ProvisionedThroughput)
		}
	}

	return r0
}

// TableClass provides a mock function with given fields:
func (_m *Table) TableClass() types.TableClass {
	ret := _m.Called()

	var r0 types.TableClass
	if rf, ok := ret.Get(0).(func() types.TableClass); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.TableClass)
	}

	return r0
}
