// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/startup-of-zero-reais/dynamo-for-lambda/domain"
	mock "github.com/stretchr/testify/mock"
)

// DynamoSQL is an autogenerated mock type for the DynamoSQL type
type DynamoSQL struct {
	mock.Mock
}

// Delete provides a mock function with given fields: expression
func (_m *DynamoSQL) Delete(expression domain.SqlExpression) error {
	ret := _m.Called(expression)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.SqlExpression) error); ok {
		r0 = rf(expression)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: expression, target
func (_m *DynamoSQL) Get(expression domain.SqlExpression, target interface{}) error {
	ret := _m.Called(expression, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.SqlExpression, interface{}) error); ok {
		r0 = rf(expression, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: item, result
func (_m *DynamoSQL) Put(item interface{}, result interface{}) error {
	ret := _m.Called(item, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(item, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: expression, item, result
func (_m *DynamoSQL) Update(expression interface{}, item interface{}, result interface{}) error {
	ret := _m.Called(expression, item, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}) error); ok {
		r0 = rf(expression, item, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
